%YAML 1.2
---

# MIT License

# Copyright (c) 2021 Haggai Nuchi

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

file_extensions:
  - dsp
  - lib
scope: source.faust
variables:
  number: '\b([0-9]*\.[0-9]+|[0-9]+\.?)(e(-|\+)?[0-9]+)?\b'
  ctype: '\b(?=float|int)\b'
  precisions: '\b(singleprecision|doubleprecision|quadprecision|fixedpointprecision)\b'
contexts:
  statement-lhs:
    - include: comments
    - match: (?=\w+)
      branch_point: statement-lhs
      branch: [statement-lhs-no-precision, statement-lhs-yes-precision]

  statement-lhs-no-precision:
    - match: '{{precisions}}'
      fail: statement-lhs
    - include: statement-lhs-after-precision

  statement-lhs-yes-precision:
    - match: '{{precisions}}'
      scope: storage.modifier.faust
      set: statement-lhs-after-precision

  statement-lhs-after-precision:
    - include: comments
    - match: '\bprocess\b'
      scope: variable.language.faust
      set: statement-lhs-inner
    - match: '\w+'
      scope: entity.name.function.faust meta.function.faust
      set: statement-lhs-inner

  statement-lhs-inner:
    - include: comments
    - match: '\w+'
      scope: variable.parameter.faust meta.function.parameters.faust
    - match: '\='
      scope: keyword.operator.assignment.faust
      set: statement-rhs

  statement-rhs:
    - include: comments
    - include: double_quoted_string
    - include: expression
    - include: block
    - match: ;
      pop: true


  documentation:
    - match: '<mdoc>'
      scope: comment.block.documentation
      push:
        - meta_scope: comment.block.faust
        - match: '</mdoc>'
          scope: comment.block.documentation
          pop: true

  file-import:
    - match: '\b(import)\('
      captures:
        1: keyword.control.import.faust
      push:
        - include: double_quoted_string
        - include: comments
        - match: '\)'
          push:
            - include: comments
            - match: ;
              pop: 2

  metadata-declaration:
    - include: comments
    - match: '\bdeclare\b'
      scope: keyword.control.faust
      push:
        - include: comments
        - match: '\w+'
          scope: entity.name.faust
          push:
            - include: comments
            - include: double_quoted_string
            - match: '\w+'
              scope: entity.name.faust
              push:
                - include: comments
                - include: double_quoted_string
                - match: ;
                  pop: 3
            - match: ;
              pop: 2

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.faust
      push:
        - meta_scope: meta.block.faust
        - match: '\}'
          scope: punctuation.section.block.end.faust
          pop: true
        - include: main

  expression:
    - match: '\b(component|library|environment|with|letrec|process|seq|par|sum|prod|inputs|outputs)\b'
      scope: keyword.control.faust

    - match: '\bprocess\b'
      scope: variable.language.faust

    - match: '(,|:>|<:|:|~|@)'
      scope: keyword.algebra.faust

    - match: '\b(mem|prefix|rdtable|rwtable|select2|select3|ffunction|fconstant|fvariable|button|checkbox|vslider|hslider|nentry|vgroup|hgroup|tgroup|vbargraph|hbargraph|attach|acos|asin|atan|atan2|cos|sin|tan|exp|log|log10|pow|sqrt|abs|min|max|fmod|remainder|floor|ceil|rint)\b'
      scope: support.function.builtin.faust

    - match: '\b(float|int)\b\s*\w+(\|\w*)*'
      captures:
        1: storage.type.faust

    - match: '\b(float|int)\b'
      scope: storage.type.faust

    - match: '(<)\w+[\w\.]+(>)'
      captures:
        1: punctuation.definition.string.begin.faust
        2: punctuation.definition.string.end.faust
      scope: meta.string.faust string.quoted.other.lt-gt.faust

    - match: \+|\-|\*|/|%|<<|>>|&|\||\^|\=\=|!\=|>=|<=|<|>
      scope: keyword.operator.faust

    - match: '\bxor\b'
      scope: keyword.operator.word.faust

    - match: '{{number}}'
      scope: constant.numeric.faust

    - match: '(\b_\b|!)'
      scope: constant.language.faust

    - match: '\bwaveform\b'
      scope: storage.type.struct keyword.declaration.struct
      push:
        - include: comments
        - match: '\{'
          scope: punctuation.section.block.begin.faust
          push:
            - meta_scope: meta.block.faust
            - match: '\}'
              scope: punctuation.section.block.end.faust
              pop: 2
            - match: '{{number}}'
              scope: constant.numeric.faust



    - match: '(?=\w+)'
      branch_point: maybe-function-call
      branch: [non-function-call, function-call]

    - match: '(?=\w+)\.'
      scope: punctuation.accessor.faust

  non-function-call:
    - match: '\w+'
      set:
        - include: comments
        - match: '\('
          fail: maybe-function-call
        - match: '(?=\S)'
          pop: 1

  function-call:
    - match: '\w+'
      scope: meta.function-call.faust variable.function.faust
      set:
        - include: comments
        - match: '\('
          scope: punctuation.section.group.begin.faust
          push:
            - include: expression
            - meta_scope: meta.group.faust
            - meta_scope: meta.function-call.arguments.faust
            - match: '\)'
              scope: punctuation.section.group.end.faust
              pop: 2

  main:
    - include: comments
    - include: double_quoted_string
    - include: metadata-declaration
    - include: file-import
    - include: documentation
    - include: statement-lhs

  double_quoted_string:
    - meta_scope: meta.string.faust
    - match: '"'
      scope: punctuation.definition.string.begin.faust
      push:
      - meta_scope: string.quoted.double.faust
      - match: '\\.'
        scope: constant.character.escape.faust
      - match: '%\w+'
        scope: constant.other.placeholder.faust
      - match: '"'
        scope: punctuation.definition.string.end.faust
        pop: true

  comments:
    - match: '//'
      scope: punctuation.definition.comment.faust
      push: line_comment

    - match: '/\*'
      scope: punctuation.definition.comment.faust
      push: block_comment

  line_comment:
    - meta_scope: comment.line.faust
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block.faust
    - match: '\*/'
      pop: true
